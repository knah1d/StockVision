{"ast":null,"code":"// API Service for StockVision Backend\nimport axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8000/api/analysis';\nclass ApiService {\n  constructor() {\n    this.api = axios.create({\n      baseURL: API_BASE_URL,\n      timeout: 10000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n  // Get available tickers\n  async getTickers(sector = null, limit = null) {\n    try {\n      const params = {};\n      if (sector) params.sector = sector;\n      if (limit) params.limit = limit;\n      const response = await this.api.get('/tickers', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching tickers:', error);\n      throw error;\n    }\n  }\n\n  // Analyze single ticker\n  async analyzeTicker(ticker, days = 90) {\n    try {\n      const response = await this.api.post('/ticker', {\n        ticker,\n        days\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error analyzing ticker:', error);\n      throw error;\n    }\n  }\n\n  // Compare multiple tickers\n  async compareTickers(tickers, days = 90) {\n    try {\n      const response = await this.api.post('/compare', {\n        tickers,\n        days\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error comparing tickers:', error);\n      throw error;\n    }\n  }\n\n  // Analyze sector\n  async analyzeSector(sector, days = 90, topN = 10) {\n    try {\n      const response = await this.api.post('/sector', {\n        sector,\n        days,\n        top_n: topN\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error analyzing sector:', error);\n      throw error;\n    }\n  }\n\n  // Get sector overview\n  async getSectorOverview(days = 90) {\n    try {\n      const response = await this.api.get(`/sectors/${days}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting sector overview:', error);\n      throw error;\n    }\n  }\n\n  // Find volatile stocks\n  async findVolatileStocks(sector = null, days = 90, topN = 10) {\n    try {\n      const response = await this.api.post('/volatility', {\n        sector,\n        days,\n        top_n: topN\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error finding volatile stocks:', error);\n      throw error;\n    }\n  }\n\n  // Health check\n  async healthCheck() {\n    try {\n      const response = await this.api.get('/health');\n      return response.data;\n    } catch (error) {\n      console.error('Health check failed:', error);\n      throw error;\n    }\n  }\n\n  // Get API stats\n  async getStats() {\n    try {\n      const response = await this.api.get('/stats');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching stats:', error);\n      throw error;\n    }\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["axios","API_BASE_URL","ApiService","constructor","api","create","baseURL","timeout","headers","getTickers","sector","limit","params","response","get","data","error","console","analyzeTicker","ticker","days","post","compareTickers","tickers","analyzeSector","topN","top_n","getSectorOverview","findVolatileStocks","healthCheck","getStats"],"sources":["/home/nahid/Desktop/6th_SEM/AI/StockVision/stockvision-app/src/services/apiService.js"],"sourcesContent":["// API Service for StockVision Backend\nimport axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:8000/api/analysis';\n\nclass ApiService {\n  constructor() {\n    this.api = axios.create({\n      baseURL: API_BASE_URL,\n      timeout: 10000,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n  }\n\n  // Get available tickers\n  async getTickers(sector = null, limit = null) {\n    try {\n      const params = {};\n      if (sector) params.sector = sector;\n      if (limit) params.limit = limit;\n      \n      const response = await this.api.get('/tickers', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching tickers:', error);\n      throw error;\n    }\n  }\n\n  // Analyze single ticker\n  async analyzeTicker(ticker, days = 90) {\n    try {\n      const response = await this.api.post('/ticker', {\n        ticker,\n        days\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error analyzing ticker:', error);\n      throw error;\n    }\n  }\n\n  // Compare multiple tickers\n  async compareTickers(tickers, days = 90) {\n    try {\n      const response = await this.api.post('/compare', {\n        tickers,\n        days\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error comparing tickers:', error);\n      throw error;\n    }\n  }\n\n  // Analyze sector\n  async analyzeSector(sector, days = 90, topN = 10) {\n    try {\n      const response = await this.api.post('/sector', {\n        sector,\n        days,\n        top_n: topN\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error analyzing sector:', error);\n      throw error;\n    }\n  }\n\n  // Get sector overview\n  async getSectorOverview(days = 90) {\n    try {\n      const response = await this.api.get(`/sectors/${days}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting sector overview:', error);\n      throw error;\n    }\n  }\n\n  // Find volatile stocks\n  async findVolatileStocks(sector = null, days = 90, topN = 10) {\n    try {\n      const response = await this.api.post('/volatility', {\n        sector,\n        days,\n        top_n: topN\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error finding volatile stocks:', error);\n      throw error;\n    }\n  }\n\n  // Health check\n  async healthCheck() {\n    try {\n      const response = await this.api.get('/health');\n      return response.data;\n    } catch (error) {\n      console.error('Health check failed:', error);\n      throw error;\n    }\n  }\n\n  // Get API stats\n  async getStats() {\n    try {\n      const response = await this.api.get('/stats');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching stats:', error);\n      throw error;\n    }\n  }\n}\n\nexport default new ApiService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}